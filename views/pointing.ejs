<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Pointing Task</title>

    <style>
        * { margin: 0px; padding: 0px; }
        canvas { display:block; background-color: #aaaaaa; }
    </style>
</head>

<body>
<canvas id='main'></canvas>
<script>
    // ---------Canvas Variables-------------
    var canvas = document.getElementById('main');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    // ---------Canvas Variables-------------

    // ---------Mouse Variables--------------
    var mouse = {x: 0, y: 0};
    var mousedown = false;
    var mousedownTime = 0;
    var stopLog = true;
    // ---------Mouse Variables--------------


    // ---------Config Variables--------------
    var center_diameters = [<%= center_diameters %>]; // Diameter is % of Canvas Height, These are the Diameter from the center to the Targets
    var target_diameters = [<%= target_diameters %>]; // Diameter is % of Canvas Height, These are the Target diameters
    var worker_id = "<%= worker_id %>";

    var number_of_blocks = 1;
    var number_of_targets = 11 ;
    var number_of_trials_per_block = center_diameters.length * target_diameters.length;

    var invisibleMode = true;                // true will display only the start and destination targets
    var half_invisible_half_visible = true;  // This overrides the invisibleMode value, if true half the blocks will be invisible
    var debugMode = false;                   // WARNING: In debug mode you will not have 120Hz Tracking, closer to ~50Hz tracking
    // ---------Config Variables--------------


    // ---------Message Variables--------------
    var welcomeMessage = "Welcome to the Pointing Study.\n\n" +
            "Your goal is to click the green target with the cross in it as quickly and as accurately as possible.\n\n" +
            "Please do your best to click each target as fast as possible, without making any errors.\n\n" +
            "Before starting, please press the full-screen button above.\n\n" +
            "Click to really begin!";

    var breakMessage = "Feel free to take a break now.\n\nPress OK to continue.";

    var finishMessage =  "You have finished this round.\n\nPlease press OK to continue to view your results so far. ";
    // ---------Message Variables--------------


    // ---------Block Variables--------------
    var Targets = [];
    var Trials = [];
    var oldStart;
    var errors = 0;
    var doneStudy = false;
    var skipFirst = true;   // When the trial starts you don't want to log the first target click, you log the second time the target is clicked
    var currentBlock = 0;
    // ---------Block Variables--------------

    // ---------Trial Variables--------------
    var angleIncr;      // Will hold angle between targets
    var start = 0;
    var dest = 0;

    var startTime = Date.now();
    var endTime = 0;

    var currentTrial = 0;

    var trial_cen = 0;
    var trial_tar = 0;
    var PID = 0;
    var browserName = "";
    var OSName = "Unknown OS";
    var ctx;

    var worker;
    var experiment = {data: []}; // This should get overritten, but just incase.

    var click_logs = [];


    // ---------Target Class-------------
    /* Target Class
     * (x,y) - Coordinates
     * r(px) - Radius
     * id - Identification Number
     */
    function Target(x, y, r, id) {
        'use strict';
        this.x = x;
        this.y = y;
        this.r = r;
        this.id = id;
        this.color = "white";
    }

    Target.prototype.draw = function(){
        'use strict';
        if(start === this.id){           // Start target is purple
            ctx.fillStyle = "purple";
        }
        else if(dest === this.id){       // Destination target is green
            ctx.fillStyle = "green";
        }
        else{
            ctx.fillStyle = this.color;
        }
        ctx.globalAlpha = 0.9;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.r, 0, 2*Math.PI);
        if(this.id == dest){
            // Draws the purple cross on destination target
            ctx.strokeStyle = "purple";
            ctx.moveTo(this.x, this.y - this.r);
            ctx.lineTo(this.x, this.y + this.r);
            ctx.moveTo(this.x - this.r, this.y);
            ctx.lineTo(this.x + this.r, this.y);
        }

        ctx.fill();

        ctx.stroke();

        if(debugMode){
            // Writes the target id on each target
            ctx.fillStyle = 'black';
            ctx.font = "24px Georgia";
            ctx.fillText(this.id, this.x, this.y);
        }
    };
    // ---------Target Class-------------

    // ---------Trial Class-------------
    /* Trial Class
     * cen(px) - Diameter from center of screen to center of target
     * tar(px) - Diameter of the
     */
    function Trial(cen, tar){
        'use strict';
        this.cen = cen;
        this.tar = tar;
    }
    // ---------Trial Class-------------



    // ---------Event Handlers-------------
    function onResized(){
        'use strict';

        // Get new canvas dimensions
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        if(!doneStudy){
            // Reload the trial
            Targets = [];

            trial_cen = canvas.height*(Trials[currentTrial].cen/200);
            trial_tar = canvas.height*(Trials[currentTrial].tar/200);

            for (var i = 0; i < number_of_targets; i++) {
                var temp = new Target(canvas.width/2 + Math.cos(i*angleIncr)*trial_cen, canvas.height/2 + Math.sin(i*angleIncr)*trial_cen, trial_tar, i);
                Targets.push(temp);
            }
        }
        canvasDraw();
    }

    function onMouseMove(e){
        // Get mouse position, for all kinds of browsers
        mouse.x = e.clientX || e.pageX || (e.clientX - canvas.offsetLeft);
        mouse.y = e.clientY || e.pageY || (e.clientY - canvas.offsetTop);

        if(debugMode){
            // Draw a mouse trail
            ctx.fillStyle = "black";
            ctx.beginPath();
            ctx.arc(mouse.x, mouse.y, canvas.width*.0005, 0, 2*Math.PI);
            ctx.fill();
            ctx.stroke();
        }
    }

    function onMouseDown(e){
        mousedown = true;
        mousedownTime = Date.now();
    }


     function onMouseUp(e){
        if(mousedown){  // Check if mouse was previously down, this indicates a click
            mousedown = false;
            for (var i = 0; i < Targets.length; i++) {
                if(Targets[i].id === dest){
                    // Check if distance between mouse click and center of target is less than the target radius
                    if((Math.sqrt((Math.pow(((e.x || (e.clientX - canvas.offsetLeft)) - Targets[i].x),2))+(Math.pow(((e.y || (e.clientY - canvas.offsetTop)) - Targets[i].y),2)))) <= trial_tar){
                        stopLog = false; // Enable logging
                        endTime = Date.now();
                        if(!skipFirst){
                            // Log mouse click data
                            click_logs.push({
                                trial_tar: trial_tar,
                                trial_cen: trial_cen,
                                current_trial_tar: Trials[currentTrial].tar,
                                current_trial_cen: Trials[currentTrial].cen,
                                number_of_targets: number_of_targets,
                                dest: dest,
                                start_time: startTime,
                                end_time: endTime,
                                mousedown_time: mousedownTime,
                                errors: errors,
                                browser_name: browserName,
                                os_name: OSName,
                                invisible_mode: (invisibleMode ? 0 : 1),
                                next_block:(currentBlock + 1)
                            });
                        else{
                            skipFirst = false;
                        }
                        errors = 0;
                        startTime = endTime;
                        oldStart = start;
                        start = dest;

                        if(dest === 0){  // Indicates end of a trial
                            skipFirst = true;
                            currentTrial++;
                            currentTrial %= number_of_trials_per_block;
                            if(currentTrial === 0){  // Indicates end of a block
                                currentBlock++;
                                if(currentBlock === number_of_blocks){
                                    // Happens when the entire trial is over
                                    doneStudy = true;
                                    saveClickLogs();
                                    alert(finishMessage);
                                    window.location.replace("/pointing_task/end");
                                }
                                else if(currentBlock === number_of_blocks/2 && half_invisible_half_visible){
                                    // If half done the blocks and doing half invisible half visible
                                    invisibleMode = !invisibleMode;
                                }
                            }
                            stopLog = true; // Trial is over, don't want to log inbetween trials
                            reloadTrial();
                        }
                        else{
                            // Iterate through the trial
                            dest = (oldStart === number_of_targets - 1) ? 0 : oldStart + 1;
                            canvasDraw();
                        }
                        break;
                    }
                    else{ // Missed the target
                        errors += 1;
                    }
                }
            }
        }
    }
    // ---------Event Handlers-------------



    function saveClickLogs() {
        experiment.data.push({click_logs: click_logs, move_logs: []});
        parent.ExperimentActions.update(worker._id, "pointing_task", experiment);
    }


    function onWindowLoad() {
        'use strict';
        worker = parent.WorkerStore.get();
        experiment = parent.ExperimentStore.get();

        detectBrowserOS();

        // Hide the information passed in the URL
        window.history.replaceState("Hello", "World", "PointingTask");

        alert(welcomeMessage);

        ctx = canvas.getContext('2d');

        // Determines invisibility based on parity of PID
        invisibleMode = half_invisible_half_visible && (PID % 2 === 1);

        // Initialize Trials
        for (i = 0; i < target_diameters.length; i++) {
            for (var j = 0; j < center_diameters.length; j++) {
                Trials.push(new Trial(center_diameters[j], target_diameters[i]));
            }
        }

        shuffleTrial();

        angleIncr = 2 * Math.PI / number_of_targets;                    // Angle between targets
        trial_cen = canvas.height * (Trials[currentTrial].cen / 200);   // Radius from screen center to target center for the trial
        trial_tar = canvas.height * (Trials[currentTrial].tar / 200);   // Radius of target in trial
        dest = Math.ceil(number_of_targets / 2);

        // Initialize Targets for trial
        for (i = 0; i < number_of_targets; i++) {
            var temp = new Target(canvas.width / 2 + Math.cos(i*angleIncr) * trial_cen, canvas.height / 2 + Math.sin(i * angleIncr) * trial_cen, trial_tar, i);
            Targets.push(temp);
        }

        canvasDraw();
    }

    // Initializes the next trial
    function reloadTrial(){
        'use strict';
        angleIncr = 2 * Math.PI / number_of_targets;
        trial_cen = canvas.height * (Trials[currentTrial].cen / 200);
        trial_tar = canvas.height * (Trials[currentTrial].tar / 200);
        start = 0;
        dest = Math.ceil(number_of_targets / 2);

        Targets = [];   // Empty the old targets

        canvasDraw();

        if(!doneStudy){
            alert(breakMessage);

            // Initialize new targets
            for (var i = 0; i < number_of_targets; i++) {
                var temp = new Target(canvas.width/2 + Math.cos(i*angleIncr)*trial_cen, canvas.height/2 + Math.sin(i*angleIncr)*trial_cen, trial_tar, i);
                Targets.push(temp);
            }

            canvasDraw();
        }
    }

    // Redraws the canvas
    function canvasDraw(){
        'use strict';

        // Clear old canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        for (var i = 0; i < Targets.length; i++) {
            if(invisibleMode){
                // If trial is in invisible mode, only draw start and destination target
                if(Targets[i].id == start || Targets[i].id == dest){
                    Targets[i].draw();
                }
            }
            else{
                Targets[i].draw();
            }
        }
        if(debugMode){
            // Write the debugging text
            ctx.fillStyle = 'black';
            ctx.font = "24px Georgia";
            ctx.fillText("Canvas Height: " + canvas.height + " Canvas Width: " + canvas.width  +" Current Trial: " + currentTrial +" Current Block:" + currentBlock, 0 , canvas.height*.1);
        }
    }

    // Shuffles Trials within each block by repeatedly picking random 2 trial positions to swap
    function shuffleTrial(){
        'use strict';
        var shuffle_one = Math.floor(Math.random() * Trials.length);
        var shuffle_two = Math.floor(Math.random() * Trials.length);
        var temp = null;
        for(var i = 0 ; i < 10; ++i){
            temp = Trials[shuffle_one];
            Trials[shuffle_one] = Trials[shuffle_two];
            Trials[shuffle_two] = temp;
            shuffle_one = Math.floor(Math.random() * Trials.length);
            shuffle_two = Math.floor(Math.random() * Trials.length);
        }
    }

    // Function to make the canvas fullscreen
    // Code is from a JS Fullscreen API
    function launchFullscreen(element) {
        'use strict';
        if(element.requestFullscreen) {
            element.requestFullscreen();
        }
        else if(element.mozRequestFullScreen) {
            element.mozRequestFullScreen();
        }
        else if(element.webkitRequestFullscreen) {
            element.webkitRequestFullscreen();
        }
        else if(element.msRequestFullscreen) {
            element.msRequestFullscreen();
        }
    }

    // Function to detect browser information, and OS information
    function detectBrowserOS(){
        'use strict';
        var nVer = navigator.appVersion;
        var nAgt = navigator.userAgent;
        var fullVersion  = '' + parseFloat(navigator.appVersion);
        var majorVersion = parseInt(navigator.appVersion,10);
        var nameOffset,verOffset,ix;

        if ((verOffset=nAgt.indexOf("Opera")) !== -1) {
            browserName = "Opera";
            fullVersion = nAgt.substring(verOffset + 6);
            if ((verOffset=nAgt.indexOf("Version")) !== -1){
                fullVersion = nAgt.substring(verOffset+8);
            }
        }
        else if ((verOffset=nAgt.indexOf("MSIE")) !== -1) {
            browserName = "Microsoft Internet Explorer";
            fullVersion = nAgt.substring(verOffset+5);
        }
        else if ((verOffset=nAgt.indexOf("Chrome")) !==-1) {
            browserName = "Chrome";
            fullVersion = nAgt.substring(verOffset+7);
        }
        else if ((verOffset=nAgt.indexOf("Safari")) !== -1) {
            browserName = "Safari";
            fullVersion = nAgt.substring(verOffset+7);
            if ((verOffset=nAgt.indexOf("Version")) !== -1){
                fullVersion = nAgt.substring(verOffset+8);
            }
        }
        else if ((verOffset=nAgt.indexOf("Firefox"))!== -1) {
            browserName = "Firefox";
            fullVersion = nAgt.substring(verOffset + 8);
        }
        else if ( (nameOffset=nAgt.lastIndexOf(' ') + 1) < (verOffset=nAgt.lastIndexOf('/')) ) {
            browserName = nAgt.substring(nameOffset,verOffset);
            fullVersion = nAgt.substring(verOffset+1);
            if (browserName.toLowerCase()==browserName.toUpperCase()) {
                browserName = navigator.appName;
            }
        }
        if ((ix=fullVersion.indexOf(";"))!=-1){
            fullVersion=fullVersion.substring(0,ix);
        }
        if ((ix=fullVersion.indexOf(" "))!=-1){
            fullVersion=fullVersion.substring(0,ix);
        }
        majorVersion = parseInt(''+fullVersion,10);

        if (isNaN(majorVersion)) {
            fullVersion  = ''+parseFloat(navigator.appVersion);
            majorVersion = parseInt(navigator.appVersion,10);
        }

        if (navigator.appVersion.indexOf("Win")!=-1) OSName="Windows";
        if (navigator.appVersion.indexOf("Mac")!=-1) OSName="MacOS";
        if (navigator.appVersion.indexOf("X11")!=-1) OSName="UNIX";
        if (navigator.appVersion.indexOf("Linux")!=-1) OSName="Linux";
    }

    // ---------Window Events-------------
    window.addEventListener('load', onWindowLoad, false);
    window.addEventListener('resize', onResized, false);
    // ---------Window Events-------------

    // ---------Mouse Events-------------
    document.addEventListener('mousemove', onMouseMove, false);
    document.addEventListener('mousedown', onMouseDown, false);
    document.addEventListener('mouseup',   onMouseUp, false);


</script>
<button onClick="launchFullscreen(document.documentElement)" style="top: 0; left: 0; position: absolute; width:100%;">Full Screen(Press Esc to Exit Full Screen)</button>
</body>
</html>

